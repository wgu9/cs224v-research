# Agentic AI编程助手的技术调研与思考

## 🤖 主流Agentic AI编程工具的技术栈

### 核心工具
- **Claude Code** (Anthropic)
- **Codex** (OpenAI) 
- **Cursor** (Cursor AI)

### 关键技术问题
**哪些涉及到memory相关的技术？**

重点关注：
- **Cross-chat** 跨会话记忆
- **长期记忆** 持久化存储
- **经验学习**：`learn from past → decontextualize/distill → apply to future problem and get better`

---

## 🔍 研究方向与解决的问题

### 主流研究方向
1. **会话内记忆**：单次对话中的上下文保持
2. **跨会话记忆**：不同对话间的信息传递
3. **经验沉淀**：将解决方案抽象为可复用模式
4. **执行监控**：防止AI偏离目标

### 核心问题
- AI在长任务中容易**跑题**和**偏离目标**
- 缺乏**历史经验**的积累和复用
- **上下文丢失**导致重复工作

---

## 💡 具体应用场景与解决方案

### 场景1：代码修改中的跑题问题

> **问题描述**：当使用Cursor修改代码时，AI经常分心。比如我们在修复一个bug（这是我们的目标），但在过程中，AI可能会偏离到无关的任务。

**解决方案**：设计一个Memory系统，记录：
- **where**：哪些文件被修改了
- **what**：实现了什么
- **how**：上下文（"在哪里、做了什么、怎么做"）

本质上是一个**AI协作历史的数据库**。

---

## 🎯 五大核心痛点与解决方案

### 1. 避免跑题
- **解决方案**：有"目标-子任务-检查点"地图，偏航即提醒/回滚
- **技术基础**：Claude Code的checkpoint思路 + 事件化记录
- **效果**：长任务不再"越改越远"

### 2. 把一次性解决变成可复用资产
- **解决方案**：过往客户问题被"去场景化"成方案卡，新客户直接套用/微调
- **技术基础**：Voyager/Reflexion思路
- **效果**：经验积累与模式复用

### 3. 跨会话不丢上下文
- **解决方案**：项目规则/依赖/禁用API持久化
- **技术基础**：ChatGPT/Claude/Cursor的Memory
- **效果**：换个会话继续，无需重复喂料

### 4. 可审计与可回滚
- **解决方案**：每步改动与测试结果都在
- **效果**：方便code review、事后审计与合规要求

### 5. 提效基准可量化
- **解决方案**：复用率、回滚次数、平均修复回合数、相似问题"首试成功率"等指标
- **技术基础**：SWE-agent评测范式启发
- **效果**：直观看到改进效果

---

## ❓ 核心问题

**我要解决的问题就是"避免跑题"。这个是能通过定义一个"记忆"的方法解决的吗？**

### 分析
"避免跑题"本质上是一个**执行监控**问题，而不仅仅是记忆问题。需要：

1. **目标定义**：明确当前任务的目标和边界
2. **执行监控**：实时检测是否偏离目标
3. **纠正机制**：发现偏离时的提醒和回滚
4. **历史学习**：从过往的跑题案例中学习模式

**记忆系统**可以作为支撑，但核心需要的是**目标-检查点-守卫**的执行框架。